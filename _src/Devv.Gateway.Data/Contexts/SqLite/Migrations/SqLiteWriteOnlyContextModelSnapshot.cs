// <auto-generated />
using System;
using Devv.Gateway.Data.Contexts.SqLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Devv.Gateway.Data.Contexts.SqLite.Migrations
{
    [DbContext(typeof(SqLiteWriteOnlyContext))]
    partial class SqLiteWriteOnlyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Devv.Gateway.Data.Entities.ActiveHealthCheckConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HealthCheckConfigId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Interval")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Policy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Query")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Timeout")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckConfigId")
                        .IsUnique();

                    b.ToTable("ActiveHealthChecks");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.CertificateConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AwsCertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AwsRegion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HostId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyVaultCertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyVaultName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KeyVaultUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.ClusterConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HostId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoadBalancingPolicy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.DestinationConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Health")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HeaderMatchConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MatchConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchConfigId");

                    b.ToTable("HeaderMatches");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HealthCheckConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HttpClientConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DangerousAcceptAnyServerCertificate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableMultipleHttp2Connections")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxConnectionsPerServer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestHeaderEncoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseHeaderEncoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("SslProtocols")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.ToTable("HttpClients");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HttpRequestConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ActivityTimeout")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowResponseBuffering")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionPolicy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.ToTable("HttpRequests");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.MatchConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hosts")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Methods")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RouteConfigId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.MetadataConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RouteConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.HasIndex("RouteConfigId")
                        .IsUnique();

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.PassiveHealthCheckConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HealthCheckConfigId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("ReactivationPeriod")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckConfigId")
                        .IsUnique();

                    b.ToTable("PassiveHealthChecks");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.QueryParameterMatchConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MatchConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchConfigId");

                    b.ToTable("QueryParameterMatches");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.RouteConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorizationPolicy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorsPolicy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HostId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MaxRequestBodySize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.SessionAffinityConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailurePolicy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.ToTable("SessionAffinities");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.TransformConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestHeader")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RouteConfigId");

                    b.ToTable("Transforms");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.ActiveHealthCheckConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.HealthCheckConfig", "HealthCheckConfig")
                        .WithOne("Active")
                        .HasForeignKey("Devv.Gateway.Data.Entities.ActiveHealthCheckConfig", "HealthCheckConfigId");

                    b.Navigation("HealthCheckConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.CertificateConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.Host", "Host")
                        .WithOne("Certificate")
                        .HasForeignKey("Devv.Gateway.Data.Entities.CertificateConfig", "HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.ClusterConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.Host", "Host")
                        .WithOne("Cluster")
                        .HasForeignKey("Devv.Gateway.Data.Entities.ClusterConfig", "HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.DestinationConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.ClusterConfig", "ClusterConfig")
                        .WithMany("Destinations")
                        .HasForeignKey("ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HeaderMatchConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.MatchConfig", "MatchConfig")
                        .WithMany("Headers")
                        .HasForeignKey("MatchConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HealthCheckConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.ClusterConfig", "ClusterConfig")
                        .WithOne("HealthCheck")
                        .HasForeignKey("Devv.Gateway.Data.Entities.HealthCheckConfig", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HttpClientConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.ClusterConfig", "ClusterConfig")
                        .WithOne("HttpClient")
                        .HasForeignKey("Devv.Gateway.Data.Entities.HttpClientConfig", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HttpRequestConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.ClusterConfig", "ClusterConfig")
                        .WithOne("HttpRequest")
                        .HasForeignKey("Devv.Gateway.Data.Entities.HttpRequestConfig", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.MatchConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.RouteConfig", "RouteConfig")
                        .WithOne("Match")
                        .HasForeignKey("Devv.Gateway.Data.Entities.MatchConfig", "RouteConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.MetadataConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.ClusterConfig", "ClusterConfig")
                        .WithOne("Metadata")
                        .HasForeignKey("Devv.Gateway.Data.Entities.MetadataConfig", "ClusterConfigId");

                    b.HasOne("Devv.Gateway.Data.Entities.RouteConfig", "RouteConfig")
                        .WithOne("Metadata")
                        .HasForeignKey("Devv.Gateway.Data.Entities.MetadataConfig", "RouteConfigId");

                    b.Navigation("ClusterConfig");

                    b.Navigation("RouteConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.PassiveHealthCheckConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.HealthCheckConfig", "HealthCheckConfig")
                        .WithOne("Passive")
                        .HasForeignKey("Devv.Gateway.Data.Entities.PassiveHealthCheckConfig", "HealthCheckConfigId");

                    b.Navigation("HealthCheckConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.QueryParameterMatchConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.MatchConfig", "MatchConfig")
                        .WithMany("QueryParameters")
                        .HasForeignKey("MatchConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.RouteConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.Host", "Host")
                        .WithMany("Routes")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.SessionAffinityConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.ClusterConfig", "ClusterConfig")
                        .WithOne("SessionAffinity")
                        .HasForeignKey("Devv.Gateway.Data.Entities.SessionAffinityConfig", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.TransformConfig", b =>
                {
                    b.HasOne("Devv.Gateway.Data.Entities.RouteConfig", "RouteConfig")
                        .WithMany("Transforms")
                        .HasForeignKey("RouteConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteConfig");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.ClusterConfig", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("HealthCheck");

                    b.Navigation("HttpClient");

                    b.Navigation("HttpRequest");

                    b.Navigation("Metadata");

                    b.Navigation("SessionAffinity");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.HealthCheckConfig", b =>
                {
                    b.Navigation("Active");

                    b.Navigation("Passive");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.Host", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("Cluster")
                        .IsRequired();

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.MatchConfig", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("QueryParameters");
                });

            modelBuilder.Entity("Devv.Gateway.Data.Entities.RouteConfig", b =>
                {
                    b.Navigation("Match");

                    b.Navigation("Metadata");

                    b.Navigation("Transforms");
                });
#pragma warning restore 612, 618
        }
    }
}
