// <auto-generated />
using System;
using Data.Contexts.SqLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Contexts.SqLite.Migrations
{
    [DbContext(typeof(SqLiteWriteOnlyContext))]
    partial class SqLiteWriteOnlyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Data.Entities.ActiveHealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HealthCheckConfigId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Policy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Query")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Timeout")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("ActiveHealthChecks", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CertificateSource")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Certificate source type: Local, KeyVault, InMemory, SelfSigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePassword")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Local certificate file password");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Local certificate file path");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyVaultCertificateName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Certificate name in Azure Key Vault");

                    b.Property<string>("KeyVaultCertificatePasswordName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Certificate password secret name in Azure Key Vault");

                    b.Property<string>("KeyVaultName")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Azure Key Vault name");

                    b.Property<string>("KeyVaultUri")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Azure Key Vault URI");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Certificate display name");

                    b.Property<string>("SubjectAlternativeNames")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Subject Alternative Names for self-signed certificates");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HostId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoadBalancingPolicy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Clusters", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Health")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Destinations", (string)null);
                });

            modelBuilder.Entity("Data.Entities.HeaderMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MatchConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MatchConfigId");

                    b.ToTable("HeaderMatches", (string)null);
                });

            modelBuilder.Entity("Data.Entities.HealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("HealthChecks", (string)null);
                });

            modelBuilder.Entity("Data.Entities.HttpClientSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DangerousAcceptAnyServerCertificate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableMultipleHttp2Connections")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxConnectionsPerServer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestHeaderEncoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseHeaderEncoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("SslProtocols")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("HttpClientSettings", (string)null);
                });

            modelBuilder.Entity("Data.Entities.HttpRequestSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ActivityTimeout")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowResponseBuffering")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionPolicy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("HttpRequestSettings", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Hosts")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Methods")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("RouteConfigId")
                        .IsUnique();

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(8000)
                        .HasColumnType("TEXT")
                        .HasComment("JSON serialized additional event data");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT")
                        .HasComment("Duration of the operation");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Error message if event failed");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Description of the event");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER")
                        .HasComment("Type of audit event");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasComment("Client IP address (supports IPv6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether the event was successful");

                    b.Property<Guid?>("McpServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Session identifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Client user agent string");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT")
                        .HasComment("User email address");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("OIDC subject/user identifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_McpAuditLogs_CreatedAt");

                    b.HasIndex("EventType")
                        .HasDatabaseName("IX_McpAuditLogs_EventType");

                    b.HasIndex("IsSuccess")
                        .HasDatabaseName("IX_McpAuditLogs_IsSuccess");

                    b.HasIndex("McpServerId")
                        .HasDatabaseName("IX_McpAuditLogs_McpServerId");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("IX_McpAuditLogs_UserEmail");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_McpAuditLogs_UserId");

                    b.HasIndex("EventType", "CreatedAt")
                        .HasDatabaseName("IX_McpAuditLogs_EventType_CreatedAt");

                    b.HasIndex("McpServerId", "CreatedAt")
                        .HasDatabaseName("IX_McpAuditLogs_ServerId_CreatedAt");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_McpAuditLogs_UserId_CreatedAt");

                    b.ToTable("McpAuditLogs", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpBackendAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowPerUserApiKeys")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether to allow per-user API keys");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Encrypted global API key");

                    b.Property<string>("ApiKeyHeader")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Authorization")
                        .HasComment("Header name for API key");

                    b.Property<string>("ApiKeyPrefix")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Bearer")
                        .HasComment("Prefix for API key value");

                    b.Property<int>("AuthType")
                        .HasColumnType("INTEGER")
                        .HasComment("Authentication type: None, OAuth2, ApiKey, Bearer");

                    b.Property<string>("AuthorizationEndpoint")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth2 authorization endpoint URL");

                    b.Property<string>("ClientId")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth2 client ID");

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Encrypted OAuth2 client secret");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomHeaders")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasComment("JSON serialized custom headers");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableTokenRefresh")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether to enable automatic token refresh");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("McpServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUri")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth2 redirect URI");

                    b.Property<string>("Scope")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth2 requested scopes");

                    b.Property<int>("TokenCacheTtlSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3600)
                        .HasComment("Token cache TTL in seconds");

                    b.Property<string>("TokenEndpoint")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth2 token endpoint URL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthType");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("McpServerId")
                        .IsUnique()
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("McpBackendAuths", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpRoleAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasComment("Optional expiration date for the assignment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether the assignment is active");

                    b.Property<Guid>("McpServerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleDisplayName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasComment("Human-readable role name");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("OIDC role/group name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("RoleName")
                        .HasDatabaseName("IX_McpRoleAssignments_RoleName");

                    b.HasIndex("McpServerId", "RoleName")
                        .IsUnique()
                        .HasDatabaseName("IX_McpRoleAssignments_ServerId_RoleName")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("McpRoleAssignments", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Description of the MCP server functionality");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("WebSocket or SSE endpoint URL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether the MCP server is enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Unique name for the MCP server");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Priority for routing (lower = higher priority)");

                    b.Property<int>("ProtocolType")
                        .HasColumnType("INTEGER")
                        .HasComment("Protocol type: WebSocket, SSE, or HTTP");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("Priority");

                    b.ToTable("McpServers", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpUserApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Encrypted user-specific API key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasComment("Optional expiration date for the API key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether the API key is active");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of last API key usage");

                    b.Property<Guid>("McpBackendAuthId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT")
                        .HasComment("User email address");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("OIDC subject/user identifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("LastUsedAt");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("IX_McpUserApiKeys_UserEmail");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_McpUserApiKeys_UserId");

                    b.HasIndex("McpBackendAuthId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_McpUserApiKeys_BackendAuthId_UserId")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("McpUserApiKeys", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpUserAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasComment("Optional expiration date for the assignment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether the assignment is active");

                    b.Property<Guid>("McpServerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserDisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("User display name");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT")
                        .HasComment("User email address");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("OIDC subject/user identifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("IX_McpUserAssignments_UserEmail");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_McpUserAssignments_UserId");

                    b.HasIndex("McpServerId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_McpUserAssignments_ServerId_UserId")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("McpUserAssignments", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RouteConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Metadata", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Metrics.RequestMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientIp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClusterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<long>("RequestSize")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResponseSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RouteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RequestMetrics");
                });

            modelBuilder.Entity("Data.Entities.Metrics.SystemMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveConnections")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CpuUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("DiskReadKbps")
                        .HasColumnType("REAL");

                    b.Property<double>("DiskWriteKbps")
                        .HasColumnType("REAL");

                    b.Property<int>("HandleCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HostName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MemoryUsageMB")
                        .HasColumnType("REAL");

                    b.Property<double>("NetworkInboundKbps")
                        .HasColumnType("REAL");

                    b.Property<double>("NetworkOutboundKbps")
                        .HasColumnType("REAL");

                    b.Property<int>("ThreadCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalMemoryMB")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SystemMetrics");
                });

            modelBuilder.Entity("Data.Entities.PassiveHealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HealthCheckConfigId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("ReactivationPeriod")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("PassiveHealthChecks", (string)null);
                });

            modelBuilder.Entity("Data.Entities.QueryParameterMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MatchConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MatchConfigId");

                    b.ToTable("QueryParameterMatches", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorizationPolicy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorsPolicy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HostId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MaxRequestBodySize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("Data.Entities.SessionAffinity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClusterConfigId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailurePolicy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("SessionAffinity", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Transform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestHeader")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("RouteConfigId");

                    b.ToTable("Transforms", (string)null);
                });

            modelBuilder.Entity("Data.Entities.WebHost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("WebHosts", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ActiveHealthCheck", b =>
                {
                    b.HasOne("Data.Entities.HealthCheck", "HealthCheckConfig")
                        .WithOne("Active")
                        .HasForeignKey("Data.Entities.ActiveHealthCheck", "HealthCheckConfigId");

                    b.Navigation("HealthCheckConfig");
                });

            modelBuilder.Entity("Data.Entities.Cluster", b =>
                {
                    b.HasOne("Data.Entities.WebHost", "Host")
                        .WithOne("Cluster")
                        .HasForeignKey("Data.Entities.Cluster", "HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Data.Entities.Destination", b =>
                {
                    b.HasOne("Data.Entities.Cluster", "ClusterConfig")
                        .WithMany("Destinations")
                        .HasForeignKey("ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Data.Entities.HeaderMatch", b =>
                {
                    b.HasOne("Data.Entities.Match", "MatchConfig")
                        .WithMany("Headers")
                        .HasForeignKey("MatchConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchConfig");
                });

            modelBuilder.Entity("Data.Entities.HealthCheck", b =>
                {
                    b.HasOne("Data.Entities.Cluster", "ClusterConfig")
                        .WithOne("HealthCheck")
                        .HasForeignKey("Data.Entities.HealthCheck", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Data.Entities.HttpClientSettings", b =>
                {
                    b.HasOne("Data.Entities.Cluster", "ClusterConfig")
                        .WithOne("HttpClient")
                        .HasForeignKey("Data.Entities.HttpClientSettings", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Data.Entities.HttpRequestSettings", b =>
                {
                    b.HasOne("Data.Entities.Cluster", "ClusterConfig")
                        .WithOne("HttpRequest")
                        .HasForeignKey("Data.Entities.HttpRequestSettings", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Data.Entities.Match", b =>
                {
                    b.HasOne("Data.Entities.Route", "Route")
                        .WithOne("Match")
                        .HasForeignKey("Data.Entities.Match", "RouteConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpAuditLog", b =>
                {
                    b.HasOne("Data.Entities.Mcp.McpServer", "McpServer")
                        .WithMany("AuditLogs")
                        .HasForeignKey("McpServerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("McpServer");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpBackendAuth", b =>
                {
                    b.HasOne("Data.Entities.Mcp.McpServer", "McpServer")
                        .WithOne("BackendAuth")
                        .HasForeignKey("Data.Entities.Mcp.McpBackendAuth", "McpServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("McpServer");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpRoleAssignment", b =>
                {
                    b.HasOne("Data.Entities.Mcp.McpServer", "McpServer")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("McpServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("McpServer");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpUserApiKey", b =>
                {
                    b.HasOne("Data.Entities.Mcp.McpBackendAuth", "McpBackendAuth")
                        .WithMany("UserApiKeys")
                        .HasForeignKey("McpBackendAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("McpBackendAuth");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpUserAssignment", b =>
                {
                    b.HasOne("Data.Entities.Mcp.McpServer", "McpServer")
                        .WithMany("UserAssignments")
                        .HasForeignKey("McpServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("McpServer");
                });

            modelBuilder.Entity("Data.Entities.Metadata", b =>
                {
                    b.HasOne("Data.Entities.Cluster", "Cluster")
                        .WithOne("Metadata")
                        .HasForeignKey("Data.Entities.Metadata", "ClusterConfigId");

                    b.HasOne("Data.Entities.Route", "Route")
                        .WithOne("Metadata")
                        .HasForeignKey("Data.Entities.Metadata", "ClusterConfigId");

                    b.Navigation("Cluster");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Data.Entities.PassiveHealthCheck", b =>
                {
                    b.HasOne("Data.Entities.HealthCheck", "HealthCheckConfig")
                        .WithOne("Passive")
                        .HasForeignKey("Data.Entities.PassiveHealthCheck", "HealthCheckConfigId");

                    b.Navigation("HealthCheckConfig");
                });

            modelBuilder.Entity("Data.Entities.QueryParameterMatch", b =>
                {
                    b.HasOne("Data.Entities.Match", "Match")
                        .WithMany("QueryParameters")
                        .HasForeignKey("MatchConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Data.Entities.Route", b =>
                {
                    b.HasOne("Data.Entities.WebHost", "Host")
                        .WithMany("Routes")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Data.Entities.SessionAffinity", b =>
                {
                    b.HasOne("Data.Entities.Cluster", "ClusterConfig")
                        .WithOne("SessionAffinity")
                        .HasForeignKey("Data.Entities.SessionAffinity", "ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");
                });

            modelBuilder.Entity("Data.Entities.Transform", b =>
                {
                    b.HasOne("Data.Entities.Route", "RouteConfig")
                        .WithMany("Transforms")
                        .HasForeignKey("RouteConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteConfig");
                });

            modelBuilder.Entity("Data.Entities.WebHost", b =>
                {
                    b.HasOne("Data.Entities.Certificate", "Certificate")
                        .WithMany("WebHosts")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Data.Entities.Certificate", b =>
                {
                    b.Navigation("WebHosts");
                });

            modelBuilder.Entity("Data.Entities.Cluster", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("HealthCheck");

                    b.Navigation("HttpClient");

                    b.Navigation("HttpRequest");

                    b.Navigation("Metadata");

                    b.Navigation("SessionAffinity");
                });

            modelBuilder.Entity("Data.Entities.HealthCheck", b =>
                {
                    b.Navigation("Active");

                    b.Navigation("Passive");
                });

            modelBuilder.Entity("Data.Entities.Match", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("QueryParameters");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpBackendAuth", b =>
                {
                    b.Navigation("UserApiKeys");
                });

            modelBuilder.Entity("Data.Entities.Mcp.McpServer", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BackendAuth");

                    b.Navigation("RoleAssignments");

                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("Data.Entities.Route", b =>
                {
                    b.Navigation("Match");

                    b.Navigation("Metadata");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("Data.Entities.WebHost", b =>
                {
                    b.Navigation("Cluster");

                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
