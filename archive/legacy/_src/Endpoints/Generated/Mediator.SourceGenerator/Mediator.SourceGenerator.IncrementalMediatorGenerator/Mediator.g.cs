// <auto-generated>
//     Generated by the Mediator source generator.
// </auto-generated>

#pragma warning disable CS8019 // Unused usings
#pragma warning disable CS8321 // Unused local function
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

#nullable enable

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using System.Linq;

using SD = global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor;

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// DI extensions for Mediator.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public static class MediatorDependencyInjectionExtensions
    {
        /// <summary>
        /// Adds the Mediator implementation and handlers of your application.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services)
        {
            return AddMediator(services, null);
        }

        /// <summary>
        /// Adds the Mediator implementation and handlers of your application, with specified options.
        /// </summary>
        public static IServiceCollection AddMediator(this IServiceCollection services, global::System.Action<global::Mediator.MediatorOptions>? options)
        {
            var opts = new global::Mediator.MediatorOptions();
            if (options != null)
                options(opts);

            var configuredViaAttribute = false;
            if (opts.ServiceLifetime != global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton && !configuredViaAttribute)
            {
                var errMsg = "Invalid configuration detected for Mediator. ";
                errMsg += "Generated code for 'Singleton' lifetime, but got '" + opts.ServiceLifetime + "' lifetime from options. ";
                errMsg += "This means that the source generator hasn't seen the 'AddMediator' method call during compilation. ";
                errMsg += "Make sure that the 'AddMediator' method is called from the project that references the Mediator.SourceGenerator package.";
                throw new global::System.Exception(errMsg);
            }

            services.Add(new SD(typeof(global::Mediator.Mediator), typeof(global::Mediator.Mediator), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.IMediator), sp => sp.GetRequiredService<global::Mediator.Mediator>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.ISender), sp => sp.GetRequiredService<global::Mediator.Mediator>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.IPublisher), sp => sp.GetRequiredService<global::Mediator.Mediator>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            // Register handlers for request messages
            services.TryAdd(new SD(typeof(global::Endpoints.Certificates.Find.QueryHandler), typeof(global::Endpoints.Certificates.Find.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::Endpoints.Certificates.Find.Request, global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>>), typeof(global::Endpoints.Certificates.Find.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Find.Request, global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Find.Request, global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Metrics.GetRequest.QueryHandler), typeof(global::Endpoints.Metrics.GetRequest.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::Endpoints.Metrics.GetRequest.Request, global::Endpoints.Metrics.GetRequest.Response>), typeof(global::Endpoints.Metrics.GetRequest.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetRequest.Request, global::Endpoints.Metrics.GetRequest.Response>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetRequest.Request, global::Endpoints.Metrics.GetRequest.Response>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Metrics.GetSystem.QueryHandler), typeof(global::Endpoints.Metrics.GetSystem.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::Endpoints.Metrics.GetSystem.Request, global::Endpoints.Metrics.GetSystem.Response>), typeof(global::Endpoints.Metrics.GetSystem.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetSystem.Request, global::Endpoints.Metrics.GetSystem.Response>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetSystem.Request, global::Endpoints.Metrics.GetSystem.Response>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Certificates.Create.CommandHandler), typeof(global::Endpoints.Certificates.Create.CommandHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::Endpoints.Certificates.Create.Request, global::Endpoints.Certificates.Create.Response>), typeof(global::Endpoints.Certificates.Create.CommandHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Certificates.Create.Request, global::Endpoints.Certificates.Create.Response>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Certificates.Create.Request, global::Endpoints.Certificates.Create.Response>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Certificates.Get.QueryHandler), typeof(global::Endpoints.Certificates.Get.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::Endpoints.Certificates.Get.Request, global::Endpoints.Certificates.Get.Response?>), typeof(global::Endpoints.Certificates.Get.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Get.Request, global::Endpoints.Certificates.Get.Response?>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Get.Request, global::Endpoints.Certificates.Get.Response?>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Configuration.Get.QueryHandler), typeof(global::Endpoints.Configuration.Get.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.IQueryHandler<global::Endpoints.Configuration.Get.Request, global::Endpoints.Configuration.Get.Response?>), typeof(global::Endpoints.Configuration.Get.QueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Configuration.Get.Request, global::Endpoints.Configuration.Get.Response?>), typeof(global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Configuration.Get.Request, global::Endpoints.Configuration.Get.Response?>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Configuration.Reload.CommandHandler), typeof(global::Endpoints.Configuration.Reload.CommandHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::Endpoints.Configuration.Reload.Request, global::Endpoints.Configuration.Reload.Response>), typeof(global::Endpoints.Configuration.Reload.CommandHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Reload.Request, global::Endpoints.Configuration.Reload.Response>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Reload.Request, global::Endpoints.Configuration.Reload.Response>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Endpoints.Configuration.Update.CommandHandler), typeof(global::Endpoints.Configuration.Update.CommandHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.ICommandHandler<global::Endpoints.Configuration.Update.Request, global::Endpoints.Configuration.Update.Response>), typeof(global::Endpoints.Configuration.Update.CommandHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Update.Request, global::Endpoints.Configuration.Update.Response>), typeof(global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Update.Request, global::Endpoints.Configuration.Update.Response>), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            // Register the notification publisher that was configured
            services.Add(new SD(typeof(global::Mediator.ForeachAwaitPublisher), typeof(global::Mediator.ForeachAwaitPublisher), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.TryAdd(new SD(typeof(global::Mediator.INotificationPublisher), sp => sp.GetRequiredService<global::Mediator.ForeachAwaitPublisher>(), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            // Register internal components
            services.Add(new SD(typeof(global::Mediator.Internals.IContainerProbe), typeof(global::Mediator.Internals.ContainerProbe0), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.IContainerProbe), typeof(global::Mediator.Internals.ContainerProbe1), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));
            services.Add(new SD(typeof(global::Mediator.Internals.ContainerMetadata), typeof(global::Mediator.Internals.ContainerMetadata), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton));

            return services;

        }
    }
}

namespace Mediator.Internals
{
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<object?> Handle(
            object request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface INotificationHandlerBase
    {
        global::System.Threading.Tasks.ValueTask Handle(
            object notification,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            object request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IRequestHandlerBase<TResponse> : IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class RequestHandlerWrapper<TRequest, TResponse> : IRequestHandlerBase<TResponse>
        where TRequest : global::Mediator.IRequest<TResponse>
    {
        private global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler = null!;

        public RequestHandlerWrapper<TRequest, TResponse> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.IRequestHandler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<global::Mediator.IPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handler = _rootHandler;
            return handler(request, cancellationToken);
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TRequest)request, cancellationToken);
        }

        public async global::System.Threading.Tasks.ValueTask<object?> Handle(
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle((TRequest)request, cancellationToken);
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamRequestHandlerBase<TResponse> : IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamRequestHandlerWrapper<TRequest, TResponse> : IStreamRequestHandlerBase<TResponse>
        where TRequest : global::Mediator.IStreamRequest<TResponse>
    {
        private global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler = null!;

        public StreamRequestHandlerWrapper<TRequest, TResponse> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.IStreamRequestHandler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handler = _rootHandler;
            return handler(request, cancellationToken);
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TRequest)request, cancellationToken);
        }

        public async global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle((TRequest)request, cancellationToken))
                yield return el;
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface ICommandHandlerBase<TResponse> : IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.ICommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class CommandHandlerWrapper<TRequest, TResponse> : ICommandHandlerBase<TResponse>
        where TRequest : global::Mediator.ICommand<TResponse>
    {
        private global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler = null!;

        public CommandHandlerWrapper<TRequest, TResponse> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.ICommandHandler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<global::Mediator.IPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handler = _rootHandler;
            return handler(request, cancellationToken);
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.ICommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TRequest)request, cancellationToken);
        }

        public async global::System.Threading.Tasks.ValueTask<object?> Handle(
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle((TRequest)request, cancellationToken);
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamCommandHandlerBase<TResponse> : IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.IStreamCommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamCommandHandlerWrapper<TRequest, TResponse> : IStreamCommandHandlerBase<TResponse>
        where TRequest : global::Mediator.IStreamCommand<TResponse>
    {
        private global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler = null!;

        public StreamCommandHandlerWrapper<TRequest, TResponse> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.IStreamCommandHandler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handler = _rootHandler;
            return handler(request, cancellationToken);
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.IStreamCommand<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TRequest)request, cancellationToken);
        }

        public async global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle((TRequest)request, cancellationToken))
                yield return el;
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IQueryHandlerBase<TResponse> : IMessageHandlerBase
    {
        global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.IQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class QueryHandlerWrapper<TRequest, TResponse> : IQueryHandlerBase<TResponse>
        where TRequest : global::Mediator.IQuery<TResponse>
    {
        private global::Mediator.MessageHandlerDelegate<TRequest, TResponse> _rootHandler = null!;

        public QueryHandlerWrapper<TRequest, TResponse> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.IQueryHandler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<global::Mediator.IPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.MessageHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handler = _rootHandler;
            return handler(request, cancellationToken);
        }

        public global::System.Threading.Tasks.ValueTask<TResponse> Handle(
            global::Mediator.IQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TRequest)request, cancellationToken);
        }

        public async global::System.Threading.Tasks.ValueTask<object?> Handle(
            object request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return await Handle((TRequest)request, cancellationToken);
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    internal interface IStreamQueryHandlerBase<TResponse> : IStreamMessageHandlerBase
    {
        global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.IStreamQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        );
    }
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class StreamQueryHandlerWrapper<TRequest, TResponse> : IStreamQueryHandlerBase<TResponse>
        where TRequest : global::Mediator.IStreamQuery<TResponse>
    {
        private global::Mediator.StreamHandlerDelegate<TRequest, TResponse> _rootHandler = null!;

        public StreamQueryHandlerWrapper<TRequest, TResponse> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            var concreteHandler = sp.GetRequiredService<global::Mediator.IStreamQueryHandler<TRequest, TResponse>>();
            var pipelineBehaviours = sp.GetServices<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>>();
            var handler = (global::Mediator.StreamHandlerDelegate<TRequest, TResponse>)concreteHandler.Handle;

            global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[] pipelineBehavioursArray;
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]>(
                    pipelineBehaviours
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    pipelineBehaviours is not global::Mediator.IStreamPipelineBehavior<TRequest, TResponse>[]
                );
                pipelineBehavioursArray = pipelineBehaviours.ToArray();
            }

            for (int i = pipelineBehavioursArray.Length - 1; i >= 0; i--)
            {
                var pipeline = pipelineBehavioursArray[i];
                var handlerCopy = handler;
                var pipelineCopy = pipeline;
                handler = (TRequest message, System.Threading.CancellationToken cancellationToken) => pipelineCopy.Handle(message, handlerCopy, cancellationToken);
            }

            _rootHandler = handler;
            return this;
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            TRequest request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handler = _rootHandler;
            return handler(request, cancellationToken);
        }

        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> Handle(
            global::Mediator.IStreamQuery<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TRequest)request, cancellationToken);
        }

        public async global::System.Collections.Generic.IAsyncEnumerable<object?> Handle(
            object request,
            [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken
        )
        {
            await foreach (var el in Handle((TRequest)request, cancellationToken))
                yield return el;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class NotificationHandlerWrapper<TNotification> : INotificationHandlerBase
        where TNotification : global::Mediator.INotification
    {
        private global::Mediator.ForeachAwaitPublisher _publisher = null!;
        private global::Mediator.INotificationHandler<TNotification>[] _handlers = null!;

        public NotificationHandlerWrapper<TNotification> Init(
            global::Mediator.Internals.ContainerMetadata containerMetadata,
            global::System.IServiceProvider sp
        )
        {
            _publisher = containerMetadata.NotificationPublisher;
            var handlers = sp.GetServices<global::Mediator.INotificationHandler<TNotification>>();
            if (containerMetadata.ServicesUnderlyingTypeIsArray)
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
                _handlers = global::System.Runtime.CompilerServices.Unsafe.As<global::Mediator.INotificationHandler<TNotification>[]>(
                    handlers
                );
            }
            else
            {
                global::System.Diagnostics.Debug.Assert(
                    handlers is not global::Mediator.INotificationHandler<TNotification>[],
                    $"Unexpected type: {handlers.GetType()}"
                );
                _handlers = handlers.ToArray();
            }
            return this;
        }

        public global::System.Threading.Tasks.ValueTask Handle(
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            var handlers = _handlers;
            if (handlers.Length == 0)
            {
                return default;
            }
            return _publisher.Publish(
                new global::Mediator.NotificationHandlers<TNotification>(handlers, isArray: true),
                notification,
                cancellationToken
            );
        }

        public global::System.Threading.Tasks.ValueTask Handle(
            object notification,
            global::System.Threading.CancellationToken cancellationToken
        )
        {
            return Handle((TNotification)notification, cancellationToken);
        }
    }

    internal interface IContainerProbe { }
    internal sealed class ContainerProbe0 : IContainerProbe { }
    internal sealed class ContainerProbe1 : IContainerProbe { }

    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    internal sealed class ContainerMetadata
    {
        public readonly bool ServicesUnderlyingTypeIsArray;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> RequestHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> CommandHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> QueryHandlerWrappers;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamRequestHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamCommandHandlerWrappers;
        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> StreamQueryHandlerWrappers;

        public readonly global::System.Collections.Frozen.FrozenDictionary<global::System.Type, object> NotificationHandlerWrappers;

        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Certificates.Create.Request, global::Endpoints.Certificates.Create.Response> Wrapper_For_Endpoints_Certificates_Create_Request;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Reload.Request, global::Endpoints.Configuration.Reload.Response> Wrapper_For_Endpoints_Configuration_Reload_Request;
        public readonly global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Update.Request, global::Endpoints.Configuration.Update.Response> Wrapper_For_Endpoints_Configuration_Update_Request;

        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Find.Request, global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>> Wrapper_For_Endpoints_Certificates_Find_Request;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetRequest.Request, global::Endpoints.Metrics.GetRequest.Response> Wrapper_For_Endpoints_Metrics_GetRequest_Request;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetSystem.Request, global::Endpoints.Metrics.GetSystem.Response> Wrapper_For_Endpoints_Metrics_GetSystem_Request;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Get.Request, global::Endpoints.Certificates.Get.Response?> Wrapper_For_Endpoints_Certificates_Get_Request;
        public readonly global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Configuration.Get.Request, global::Endpoints.Configuration.Get.Response?> Wrapper_For_Endpoints_Configuration_Get_Request;

        public readonly global::Mediator.ForeachAwaitPublisher NotificationPublisher;

        public ContainerMetadata(global::System.IServiceProvider sp)
        {
            ServicesUnderlyingTypeIsArray = sp.GetServices<global::Mediator.Internals.IContainerProbe>() is global::Mediator.Internals.IContainerProbe[];

            NotificationPublisher = sp.GetRequiredService<global::Mediator.ForeachAwaitPublisher>();

            var requestHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(0);
            var commandHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(3);
            var queryHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(5);
            commandHandlerTypes.Add(typeof(global::Endpoints.Certificates.Create.Request), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Certificates.Create.Request, global::Endpoints.Certificates.Create.Response>>().Init(this, sp));
            commandHandlerTypes.Add(typeof(global::Endpoints.Configuration.Reload.Request), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Reload.Request, global::Endpoints.Configuration.Reload.Response>>().Init(this, sp));
            commandHandlerTypes.Add(typeof(global::Endpoints.Configuration.Update.Request), sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Update.Request, global::Endpoints.Configuration.Update.Response>>().Init(this, sp));
            queryHandlerTypes.Add(typeof(global::Endpoints.Certificates.Find.Request), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Find.Request, global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>>>().Init(this, sp));
            queryHandlerTypes.Add(typeof(global::Endpoints.Metrics.GetRequest.Request), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetRequest.Request, global::Endpoints.Metrics.GetRequest.Response>>().Init(this, sp));
            queryHandlerTypes.Add(typeof(global::Endpoints.Metrics.GetSystem.Request), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetSystem.Request, global::Endpoints.Metrics.GetSystem.Response>>().Init(this, sp));
            queryHandlerTypes.Add(typeof(global::Endpoints.Certificates.Get.Request), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Get.Request, global::Endpoints.Certificates.Get.Response?>>().Init(this, sp));
            queryHandlerTypes.Add(typeof(global::Endpoints.Configuration.Get.Request), sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Configuration.Get.Request, global::Endpoints.Configuration.Get.Response?>>().Init(this, sp));
            RequestHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(requestHandlerTypes);
            CommandHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(commandHandlerTypes);
            QueryHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(queryHandlerTypes);

            var streamRequestHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(0);
            var streamCommandHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(0);
            var streamQueryHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(0);
            StreamRequestHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamRequestHandlerTypes);
            StreamCommandHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamCommandHandlerTypes);
            StreamQueryHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(streamQueryHandlerTypes);

            var notificationHandlerTypes = new global::System.Collections.Generic.Dictionary<global::System.Type, object>(0);
            NotificationHandlerWrappers = global::System.Collections.Frozen.FrozenDictionary.ToFrozenDictionary(notificationHandlerTypes);

            Wrapper_For_Endpoints_Certificates_Create_Request = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Certificates.Create.Request, global::Endpoints.Certificates.Create.Response>>().Init(this, sp);
            Wrapper_For_Endpoints_Configuration_Reload_Request = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Reload.Request, global::Endpoints.Configuration.Reload.Response>>().Init(this, sp);
            Wrapper_For_Endpoints_Configuration_Update_Request = sp.GetRequiredService<global::Mediator.Internals.CommandHandlerWrapper<global::Endpoints.Configuration.Update.Request, global::Endpoints.Configuration.Update.Response>>().Init(this, sp);

            Wrapper_For_Endpoints_Certificates_Find_Request = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Find.Request, global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>>>().Init(this, sp);
            Wrapper_For_Endpoints_Metrics_GetRequest_Request = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetRequest.Request, global::Endpoints.Metrics.GetRequest.Response>>().Init(this, sp);
            Wrapper_For_Endpoints_Metrics_GetSystem_Request = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Metrics.GetSystem.Request, global::Endpoints.Metrics.GetSystem.Response>>().Init(this, sp);
            Wrapper_For_Endpoints_Certificates_Get_Request = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Certificates.Get.Request, global::Endpoints.Certificates.Get.Response?>>().Init(this, sp);
            Wrapper_For_Endpoints_Configuration_Get_Request = sp.GetRequiredService<global::Mediator.Internals.QueryHandlerWrapper<global::Endpoints.Configuration.Get.Request, global::Endpoints.Configuration.Get.Response?>>().Init(this, sp);
        }
    }
}

namespace Mediator
{
    /// <summary>
    /// Generated code for Mediator implementation.
    /// This type is also registered as a DI service.
    /// Can be used directly for high performance scenarios.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Mediator.SourceGenerator", "3.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.Diagnostics.DebuggerStepThroughAttribute]
    public sealed partial class Mediator : global::Mediator.IMediator, global::Mediator.ISender, global::Mediator.IPublisher
    {
        internal readonly global::System.IServiceProvider Services;
        private FastLazyValue<global::Mediator.Internals.ContainerMetadata, global::Mediator.Mediator> _containerMetadata;
        private global::Mediator.ForeachAwaitPublisher? _notificationPublisher;
        internal global::Mediator.ForeachAwaitPublisher NotificationPublisher
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_notificationPublisher == null)
                    _notificationPublisher = _containerMetadata.Value.NotificationPublisher;
                return _notificationPublisher!;
            }
        }
        private bool? _servicesUnderlyingTypeIsArray;
        internal bool ServicesUnderlyingTypeIsArray
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            get
            {
                if (_servicesUnderlyingTypeIsArray == null)
                    _servicesUnderlyingTypeIsArray = _containerMetadata.Value.ServicesUnderlyingTypeIsArray;
                return _servicesUnderlyingTypeIsArray!.Value;
            }
        }

        /// <summary>
        /// The lifetime of Mediator-related service registrations in DI container.
        /// </summary>
        public const global::Microsoft.Extensions.DependencyInjection.ServiceLifetime ServiceLifetime = global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton;

        /// <summary>
        /// The name of the notification publisher service that was configured.
        /// </summary>
        public const string NotificationPublisherName = "ForeachAwaitPublisher";

        /// <summary>
        /// The total number of Mediator messages that were discovered.
        /// </summary>
        public const int TotalMessages = 8;

        /// <summary>
        /// Constructor for DI, should not be used by consumer.
        /// </summary>
        public Mediator(global::System.IServiceProvider sp)
        {
            Services = sp;
            _containerMetadata = new FastLazyValue<global::Mediator.Internals.ContainerMetadata, global::Mediator.Mediator>(
                self => self.Services.GetRequiredService<global::Mediator.Internals.ContainerMetadata>(),
                this
            );
        }

        private struct FastLazyValue<T, TArg>
        {
            private const long UNINIT = 0;
            private const long INITING = 1;
            private const long INITD = 2;

            private global::System.Func<TArg, T> _generator;
            private long _state;
            private T _value;
            private TArg _arg;

            public T Value
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                get
                {
                    if (_state != INITD)
                        return ValueSlow;

                    return _value;
                }
            }

            private T ValueSlow
            {
                [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
                get
                {
                    var prevState = global::System.Threading.Interlocked.CompareExchange(ref _state, INITING, UNINIT);
                    switch (prevState)
                    {
                        case INITD:
                            // Someone has already completed init
                            return _value;
                        case INITING:
                            // Wait for someone else to complete
                            var spinWait = default(global::System.Threading.SpinWait);
                            while (global::System.Threading.Interlocked.Read(ref _state) < INITD)
                                spinWait.SpinOnce();
                            return _value;
                        case UNINIT:
                            _value = _generator(_arg);
                            global::System.Threading.Interlocked.Exchange(ref _state, INITD);
                            return _value;
                    }

                    return _value;
                }
            }

            public FastLazyValue(global::System.Func<TArg, T> generator, TArg arg)
            {
                _generator = generator;
                _state = UNINIT;
                _value = default!;
                _arg = arg;
            }
        }



        /// <summary>
        /// Send a command of type global::Endpoints.Certificates.Create.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Certificates.Create.Response> Send(
            global::Endpoints.Certificates.Create.Request command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Certificates_Create_Request.Handle(command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::Endpoints.Configuration.Reload.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Configuration.Reload.Response> Send(
            global::Endpoints.Configuration.Reload.Request command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Configuration_Reload_Request.Handle(command, cancellationToken);
        }

        /// <summary>
        /// Send a command of type global::Endpoints.Configuration.Update.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if command is null.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Configuration.Update.Response> Send(
            global::Endpoints.Configuration.Update.Request command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(command, nameof(command));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Configuration_Update_Request.Handle(command, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::Endpoints.Certificates.Find.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>> Send(
            global::Endpoints.Certificates.Find.Request query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Certificates_Find_Request.Handle(query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::Endpoints.Metrics.GetRequest.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Metrics.GetRequest.Response> Send(
            global::Endpoints.Metrics.GetRequest.Request query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Metrics_GetRequest_Request.Handle(query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::Endpoints.Metrics.GetSystem.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Metrics.GetSystem.Response> Send(
            global::Endpoints.Metrics.GetSystem.Request query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Metrics_GetSystem_Request.Handle(query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::Endpoints.Certificates.Get.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Certificates.Get.Response?> Send(
            global::Endpoints.Certificates.Get.Request query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Certificates_Get_Request.Handle(query, cancellationToken);
        }

        /// <summary>
        /// Send a query of type global::Endpoints.Configuration.Get.Request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if query is null.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<global::Endpoints.Configuration.Get.Response?> Send(
            global::Endpoints.Configuration.Get.Request query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowIfNull(query, nameof(query));
            return _containerMetadata.Value.Wrapper_For_Endpoints_Configuration_Get_Request.Handle(query, cancellationToken);
        }

        /// <summary>
        /// Send request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming request</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidRequest(request, nameof(request));
            return default;
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidRequest(request, nameof(request));
            return default!;
        }

        /// <summary>
        /// Create stream for request.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if request does not implement <see cref="global::Mediator.IStreamRequest{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="request">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamRequest<TResponse> request,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamRequest(request, nameof(request));
            return default!;
        }

        /// <summary>
        /// Send command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.ICommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming command</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (command)
            {
                case global::Endpoints.Certificates.Create.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Certificates.Create.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Certificates.Create.Response>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::Endpoints.Configuration.Reload.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Configuration.Reload.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Configuration.Reload.Response>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                case global::Endpoints.Configuration.Update.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Configuration.Update.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Configuration.Update.Response>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(command, cancellationToken);
                }
                default:
                {
                    ThrowInvalidCommand(command, nameof(command));
                    return default;
                }
            }
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.ICommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (command)
            {
                case global::Endpoints.Certificates.Create.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Certificates.Create.Response, TResponse>(ref response);
                }
                case global::Endpoints.Configuration.Reload.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Configuration.Reload.Response, TResponse>(ref response);
                }
                case global::Endpoints.Configuration.Update.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Configuration.Update.Response, TResponse>(ref response);
                }
                default:
                {
                    ThrowInvalidCommand(command, nameof(command));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Create stream for command.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if command does not implement <see cref="global::Mediator.IStreamCommand{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="command">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamCommand<TResponse> command,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamCommand(command, nameof(command));
            return default!;
        }

        /// <summary>
        /// Send query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming query</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask<TResponse> Send<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (query)
            {
                case global::Endpoints.Certificates.Find.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::Endpoints.Metrics.GetRequest.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Metrics.GetRequest.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Metrics.GetRequest.Response>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::Endpoints.Metrics.GetSystem.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Metrics.GetSystem.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Metrics.GetSystem.Response>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::Endpoints.Certificates.Get.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Certificates.Get.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Certificates.Get.Response?>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                case global::Endpoints.Configuration.Get.Request r:
                {
                    if (typeof(TResponse) == typeof(global::Endpoints.Configuration.Get.Response))
                    {
                        var task = Send(r, cancellationToken);
                        return global::System.Runtime.CompilerServices.Unsafe.As<global::System.Threading.Tasks.ValueTask<global::Endpoints.Configuration.Get.Response?>, global::System.Threading.Tasks.ValueTask<TResponse>>(ref task);
                    }
                    return SendAsync(query, cancellationToken);
                }
                default:
                {
                    ThrowInvalidQuery(query, nameof(query));
                    return default;
                }
            }
        }

        private async global::System.Threading.Tasks.ValueTask<TResponse> SendAsync<TResponse>(
            global::Mediator.IQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (query)
            {
                case global::Endpoints.Certificates.Find.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Common.Paging.PagedResult<global::Endpoints.Certificates.Find.Response, global::Endpoints.Certificates.Find.Response[]>, TResponse>(ref response);
                }
                case global::Endpoints.Metrics.GetRequest.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Metrics.GetRequest.Response, TResponse>(ref response);
                }
                case global::Endpoints.Metrics.GetSystem.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Metrics.GetSystem.Response, TResponse>(ref response);
                }
                case global::Endpoints.Certificates.Get.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Certificates.Get.Response?, TResponse>(ref response);
                }
                case global::Endpoints.Configuration.Get.Request r:
                {
                    var response = await Send(r, cancellationToken);
                    return global::System.Runtime.CompilerServices.Unsafe.As<global::Endpoints.Configuration.Get.Response?, TResponse>(ref response);
                }
                default:
                {
                    ThrowInvalidQuery(query, nameof(query));
                    return default!;
                }
            }
        }

        /// <summary>
        /// Create stream for query.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if query does not implement <see cref="global::Mediator.IStreamQuery{TResponse}"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="query">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<TResponse> CreateStream<TResponse>(
            global::Mediator.IStreamQuery<TResponse> query,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamQuery(query, nameof(query));
            return default!;
        }

        /// <summary>
        /// Send message.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public async global::System.Threading.Tasks.ValueTask<object?> Send(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            switch (message)
            {
                case global::Mediator.IBaseRequest request:
                    switch (request)
                    {
                        default:
                        {
                            ThrowInvalidRequest(request, nameof(request));
                            return default;
                        }
                    }
                case global::Mediator.IBaseCommand command:
                    switch (command)
                    {
                        case global::Endpoints.Certificates.Create.Request r: return await Send(r, cancellationToken);
                        case global::Endpoints.Configuration.Reload.Request r: return await Send(r, cancellationToken);
                        case global::Endpoints.Configuration.Update.Request r: return await Send(r, cancellationToken);
                        default:
                        {
                            ThrowInvalidCommand(command, nameof(command));
                            return default;
                        }
                    }
                case global::Mediator.IBaseQuery query:
                    switch (query)
                    {
                        case global::Endpoints.Certificates.Find.Request r: return await Send(r, cancellationToken);
                        case global::Endpoints.Metrics.GetRequest.Request r: return await Send(r, cancellationToken);
                        case global::Endpoints.Metrics.GetSystem.Request r: return await Send(r, cancellationToken);
                        case global::Endpoints.Certificates.Get.Request r: return await Send(r, cancellationToken);
                        case global::Endpoints.Configuration.Get.Request r: return await Send(r, cancellationToken);
                        default:
                        {
                            ThrowInvalidQuery(query, nameof(query));
                            return default;
                        }
                    }
                default:
                    ThrowInvalidMessage(message, nameof(message));
                    return default!;
            }
        }

        /// <summary>
        /// Create stream.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if message does not implement <see cref="global::Mediator.IStreamMessage"/>.
        /// Throws <see cref="global::Mediator.MissingMessageHandlerException"/> if no handler is registered.
        /// </summary>
        /// <param name="message">Incoming message</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Async enumerable</returns>
        public global::System.Collections.Generic.IAsyncEnumerable<object?> CreateStream(
            object message,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidStreamMessage(message, nameof(message));
            return default!;
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// Drops messages
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish(
            object notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
        {
            ThrowInvalidNotification(notification, nameof(notification));
            return default;
        }

        /// <summary>
        /// Publish notification.
        /// Throws <see cref="global::System.ArgumentNullException"/> if message is null.
        /// Throws <see cref="global::Mediator.InvalidMessageException"/> if notification does not implement <see cref="global::Mediator.INotification"/>.
        /// Throws <see cref="global::System.AggregateException"/> if handlers throw exception(s).
        /// </summary>
        /// <param name="notification">Incoming notification</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Awaitable task</returns>
        public global::System.Threading.Tasks.ValueTask Publish<TNotification>(
            TNotification notification,
            global::System.Threading.CancellationToken cancellationToken = default
        )
            where TNotification : global::Mediator.INotification
        {
            ThrowInvalidNotification(notification, nameof(notification));
            return default;
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowMissingHandler(object msg) =>
            throw new global::Mediator.MissingMessageHandlerException(msg);

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamMessage<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IStreamMessage))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamRequest<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamRequest))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamCommand<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamCommand))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidStreamQuery<T>(T? msg, string? paramName = null)
        {
            if (msg == null)
                ThrowArgumentNull(paramName);
            else if (!(msg is global::Mediator.IBaseStreamQuery))
                ThrowInvalidMessage(msg);
            else
                ThrowMissingHandler(msg);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowArgumentNull(string? paramName) =>
            throw new global::System.ArgumentNullException(paramName);

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowInvalidMessage<T>(T msg) =>
            throw new global::Mediator.InvalidMessageException(msg);

        private static void ThrowIfNull<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
        }

        private static void ThrowInvalidNotification<T>(T? argument, string paramName)
        {
            if (argument == null)
                ThrowArgumentNull(paramName);
            else if (!(argument is global::Mediator.INotification))
                ThrowInvalidMessage(argument);
        }

#if NETSTANDARD2_1_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
#endif
        private static void ThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception> exceptions) =>
            throw new global::System.AggregateException(exceptions);

        private static void MaybeThrowAggregateException(global::System.Collections.Generic.List<global::System.Exception>? exceptions)
        {
            if (exceptions != null)
            {
                ThrowAggregateException(exceptions);
            }
        }
    }
}
